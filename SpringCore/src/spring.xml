<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
				http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

<!--  <beans default-init-method="initMethod"> -->
  <!--  passing interface object & then defining class name (which eventually creates all dependent beans) is called dependency Injection -->
  <!--  bean id="triangle" in below line -->
<!-- 	<bean id="triangle" class="org.hari.javabrains.Triangle" name="triangle-name">
		
		<property name="pointA" ref="zeroPoint"></property>
		<property name="pointB" ref="point1"></property>
		<property name="pointC" ref="point2"></property>
		
	
	</bean> -->
	
	<bean id="zeroPoint" class="org.hari.javabrains.Point"  >
<!-- 		<qualifier value="circleQualifier" />
 -->		<property name="x" value="${pointA.pointX}"></property>
		<property name="y" value="${pointA.pointY}"></property>
	</bean>
	
   <bean id="point1" class="org.hari.javabrains.Point" >
				<property name="x" value="-20"></property>
				<property name="y" value="0"></property>
	</bean> 
	
	<bean id="point2" class="org.hari.javabrains.Point" >
				<property name="x" value="20"></property>
				<property name="y" value="0"></property>
	</bean>   
		
	<bean id="circle" class="org.hari.javabrains.Circle" >
		
 		  <property name="center" ref="zeroPoint"></property>  
	</bean>
	
	<!-- Enable below BeanPostProcessor here to unblock PostProcessor  
	<bean class="org.hari.javabrains.DisplayNameBeanPostProcessor" /> -->
	
	<!-- Enable below class to check factory PostProcessor  
	<bean class="org.hari.javabrains.MyBeanFactoryPostProcessor" /> -->
	
	<!-- to configure alias name
	<alias name="triangle" alias="triangle-alias"/> -->
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="pointsconfig.properties"></property>
	</bean>
	
	<!-- You can use annotation-config from <context> below, which will eventually imports all postprocessors & dont have to declare each one -->
    <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" />
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" /> 
	
	<context:annotation-config/> 
	<context:component-scan base-package="org.hari.javabrains" /> 
 	
 	<!--  below bean messageSource will help to pick messages from property class, so importing & specifying class path for property file -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
			<value>mymessages</value>
			</list>
		</property>
	
	</bean>
	
	<!-- Instead used @Controller annotation & added <context:component scan  
	  <bean id="myeventlistener" class="org.hari.javabrains.MyEventLister"/> -->
	 
</beans>